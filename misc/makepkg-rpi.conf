#!/hint/bash
#
# /etc/makepkg.conf
#

#########################################################################
# RASPBERRY PI MAKEPKG CONFIG, FOR CROSS-COMPILATION
#########################################################################

#########################################################################
# SOURCE ACQUISITION
#########################################################################
#
#-- The download utilities that makepkg should use to acquire sources
#  Format: 'protocol::agent'
DLAGENTS=('file::/usr/bin/curl -gqC - -o %o %u'
          'ftp::/usr/bin/curl -gqfC - --ftp-pasv --retry 3 --retry-delay 3 -o %o %u'
          'http::/usr/bin/curl -gqb "" -fLC - --retry 3 --retry-delay 3 -o %o %u'
          'https::/usr/bin/curl -gqb "" -fLC - --retry 3 --retry-delay 3 -o %o %u'
          'rsync::/usr/bin/rsync --no-motd -z %u %o'
          'scp::/usr/bin/scp -C %u %o')

# Other common tools:
# /usr/bin/snarf
# /usr/bin/lftpget -c
# /usr/bin/wget

#-- The package required by makepkg to download VCS sources
#  Format: 'protocol::package'
VCSCLIENTS=('bzr::bzr'
            'git::git'
            'hg::mercurial'
            'svn::subversion')

#########################################################################
# ARCHITECTURE, COMPILE FLAGS
#########################################################################
#
CARCH="armv7h"
CHOST="armv7l-unknown-linux-gnueabihf"

#-- Compiler and Linker Flags
# -march (or -mcpu) builds exclusively for an architecture
# -mtune optimizes for an architecture, but builds for whole processor family

#Convenience variable
crosspath=/usr/arm-linux-gnueabihf

#These aren't usually exported, unfortunately. To enable exporting
#apply the patch below to your system. However, I haven't found a need
#to do it yet.
#--- /usr/share/makepkg/buildenv.sh	2021-01-17 22:18:49.953915978 -0600
#+++ /usr/share/makepkg/buildenv.sh	2021-01-17 22:18:28.986801656 -0600
#@@ -36,5 +36,5 @@
# 	done
# 
# 	# ensure all necessary build variables are exported
#-	export CC CXX CPPFLAGS CFLAGS CXXFLAGS LDFLAGS RUSTFLAGS MAKEFLAGS CHOST
#+	export CPPFLAGS CFLAGS CXXFLAGS LDFLAGS RUSTFLAGS MAKEFLAGS CHOST
# }
#
CC="/usr/bin/arm-linux-gnueabi-gcc"
CXX="/usr/bin/arm-linux-gnueabi-g++"

CPPFLAGS="-D_FORTIFY_SOURCE=2"

#Explaination of CFLAGS/CXXFLAGS
#--sysroot=${crosspath}    : Typically, GCC searches for stuff in /usr, we want to change this to
#                            /usr/arm-linux-gnueabihf so that it looks for includes, libs, etc.
#                            there first
#-L${crosspath}/lib        : Re-affirms --sysroot=${crosspath} for libraries. Not sure if this is
#                            100% necessary, but itdoesn't hurt
#-Wl,-rpath=${crosslib}/lib: Instruct the linker to embed an rpath in the binary that tells the
#                            loader to first search the dir ${crosslib}/lib for static libraries
#                            followed by the usual paths (/lib, /usr/lib, /lib32 /lib64). This is
#                            useful when running tests on cross-compiled code with QEMU. It
#                            ensures that when the program is executed, it tries to load libraries
#                            from ${systroot}/lib before trying the libs in /usr, /usr/bin, etc.
#                            which are most likely x86_64 libs -- which don't work.
#-Wl,-rpath-link=${crosslib}/lib:
#                            The same as above, but for dynamically linked libraries (.so files)
#
# I looked at using the -Bprefix option of GCC, since it seems that would really help (it sets the
# loading path to /usr/arm-linux-gnueabihf/bin and sets -I and -L flags all together. However, -B
# doesn't work for C++ since it passes -isystem to the preprocessor and, due to some weirdness,
# it causes it to move the default include path down the chain which breaks its ability to find C
# includes that are needed in the C++ headers via #include_next -- even if you specify the system
# include directory manually with -I
CFLAGS="--sysroot=${crosspath} -L${crosspath}/lib -march=armv7-a -mfloat-abi=hard -mfpu=vfpv3-d16 -O2 -pipe -fstack-protector-strong -fno-plt -Wl,-rpath=${crosspath}/lib,-rpath-link=${crosspath}/lib"
CXXFLAGS="--sysroot=${crosspath} -march=armv7-a -mfloat-abi=hard -mfpu=vfpv3-d16 -O2 -pipe -fstack-protector-strong -fno-plt -Wl,-rpath=${crosspath}/lib,-rpath-link=${crosspath}/lib"

#Explanation of LDFLAGS
#-Wl,--gc-sections          : Instruct the linker the garbage-collect unused sections, mostly for
#                             debugging purposes
#-Wl,--sort-common          : Instruct the linker to sort the symbol tables
#-Wl,--as-needed            : Supposedly useful for debugging?
#-Wl,-rpath/-Wl,-rpath-link : Same as above, but useful if the build system links separately
LDFLAGS="-Wl,-O1,--sort-common,--as-needed,-z,relro,-z,now,--gc-sections,-rpath=${crosspath}/lib,-rpath-link=${crosspath}/lib"
#RUSTFLAGS="-C opt-level=2"
#-- Make Flags: change this for DistCC/SMP systems
MAKEFLAGS="-j24"
#-- Debugging flags
DEBUG_CFLAGS="-O0 -g3 -fvar-tracking-assignments -ffunction-sections -fdata-sections"
DEBUG_CXXFLAGS="-O0 -g3 -fvar-tracking-assignments -ffunction-sections -fdata-sections"
#DEBUG_RUSTFLAGS="-C debuginfo=2"

#########################################################################
# BUILD ENVIRONMENT
#########################################################################
#
# Defaults: BUILDENV=(!distcc !color !ccache check !sign)
#  A negated environment option will do the opposite of the comments below.
#
#-- distcc:   Use the Distributed C/C++/ObjC compiler
#-- color:    Colorize output messages
#-- ccache:   Use ccache to cache compilation
#-- check:    Run the check() function if present in the PKGBUILD
#-- sign:     Generate PGP signature file
#
BUILDENV=(!distcc color !ccache check !sign)
#
#-- If using DistCC, your MAKEFLAGS will also need modification. In addition,
#-- specify a space-delimited list of hosts running in the DistCC cluster.
#DISTCC_HOSTS=""
#
#-- Specify a directory for package building.
#BUILDDIR=/tmp/makepkg

#########################################################################
# GLOBAL PACKAGE OPTIONS
#   These are default values for the options=() settings
#########################################################################
#
# Default: OPTIONS=(!strip docs libtool staticlibs emptydirs !zipman !purge !debug)
#  A negated option will do the opposite of the comments below.
#
#-- strip:      Strip symbols from binaries/libraries
#-- docs:       Save doc directories specified by DOC_DIRS
#-- libtool:    Leave libtool (.la) files in packages
#-- staticlibs: Leave static library (.a) files in packages
#-- emptydirs:  Leave empty directories in packages
#-- zipman:     Compress manual (man and info) pages in MAN_DIRS with gzip
#-- purge:      Remove files specified by PURGE_TARGETS
#-- debug:      Add debugging flags as specified in DEBUG_* variables
#
OPTIONS=(strip docs !libtool !staticlibs emptydirs zipman purge !debug)

#-- File integrity checks to use. Valid: md5, sha1, sha224, sha256, sha384, sha512, b2
INTEGRITY_CHECK=(md5)
#-- Options to be used when stripping binaries. See `man strip' for details.
STRIP_BINARIES="--strip-all"
#-- Options to be used when stripping shared libraries. See `man strip' for details.
STRIP_SHARED="--strip-unneeded"
#-- Options to be used when stripping static libraries. See `man strip' for details.
STRIP_STATIC="--strip-debug"
#-- Manual (man and info) directories to compress (if zipman is specified)
MAN_DIRS=({usr{,/local}{,/share},opt/*}/{man,info})
#-- Doc directories to remove (if !docs is specified)
DOC_DIRS=(usr/{,local/}{,share/}{doc,gtk-doc} opt/*/{doc,gtk-doc})
#-- Files to be removed from all packages (if purge is specified)
PURGE_TARGETS=(usr/{,share}/info/dir .packlist *.pod)
#-- Directory to store source code in for debug packages
DBGSRCDIR="/usr/src/debug"

#########################################################################
# PACKAGE OUTPUT
#########################################################################
#
# Default: put built package and cached source in build directory
#
#-- Destination: specify a fixed directory where all packages will be placed
#PKGDEST=/home/packages
#-- Source cache: specify a fixed directory where source files will be cached
#SRCDEST=/home/sources
#-- Source packages: specify a fixed directory where all src packages will be placed
#SRCPKGDEST=/home/srcpackages
#-- Log files: specify a fixed directory where all log files will be placed
#LOGDEST=/home/makepkglogs
#-- Packager: name/email of the person or organization building packages
#PACKAGER="John Doe <john@doe.com>"
#-- Specify a key to use for package signing
#GPGKEY=""

#########################################################################
# COMPRESSION DEFAULTS
#########################################################################
#
COMPRESSGZ=(gzip -c -f -n)
COMPRESSBZ2=(bzip2 -c -f)
COMPRESSXZ=(xz -c -z -)
COMPRESSZST=(zstd -c -z -q -)
COMPRESSLRZ=(lrzip -q)
COMPRESSLZO=(lzop -q)
COMPRESSZ=(compress -c -f)
COMPRESSLZ4=(lz4 -q)
COMPRESSLZ=(lzip -c -f)

#########################################################################
# EXTENSION DEFAULTS
#########################################################################
#
PKGEXT='.pkg.tar.xz'
SRCEXT='.src.tar.gz'
